# tools/__init__.py 

#from .kadaster_tool import KadasterBRKTool, ContactHistoryTool
from tools.enhanced_pdok_location_tool import IntelligentLocationSearchTool, SpecializedAddressSearchTool
from .pdok_intelligent_agent_tool import EnhancedPDOKIntelligentAgent, SmartServiceDiscoveryTool
from .pdok_modular_tools import PDOKLocationSearchTool 
from tools.coordinate_conversion_tool import CoordinateConversionTool , CreateRDBoundingBoxTool
# Import the NEW flexible PDOK tools
from .pdok_service_discovery_tool import (
    PDOKServiceDiscoveryTool,
    PDOKDataRequestTool,
    PDOKDataFilterTool,
    PDOKMapDisplayTool,
    PDOKBuildingsFlexibleTool
)


from tools.ai_intelligent_tools import (
    PDOKServiceDiscoveryTool,
    LocationSearchTool,
    PDOKDataRequestTool
)
        
# Legacy building tool (deprecated but included for compatibility)
#try:
    #from .pdok_building_tool import PDOKBuildingsRealTool
#except ImportError:
    #print("‚ö†Ô∏è Legacy PDOKBuildingsRealTool not found - using flexible tools only")
    #PDOKBuildingsRealTool = None

__all__ = [
    # Location tools
    "IntelligentLocationSearchTool",
    "SpecializedAddressSearchTool",
    "PDOKLocationSearchTool",

    

    "CoordinateConversionTool",
    "CreateRDBoundingBoxTool",
    
    
    # NEW Flexible PDOK tools
    #"PDOKServiceDiscoveryTool",
    #"PDOKDataRequestTool",
    #"PDOKDataFilterTool", 
    #"PDOKMapDisplayTool",
    #"PDOKBuildingsFlexibleTool",
    "EnhancedPDOKIntelligentAgent",
    "SmartServiceDiscoveryTool",
    "IntelligentServiceDiscoveryTool",
    "AILocationCoordinatorTool",
    "AIDrivenPDOKAgent",
]

# Print info about available tools
def print_available_tools():
    """Print information about available PDOK tools."""
    print("üîß AVAILABLE PDOK TOOLS:")
    print("="*40)
    
    print("üìç LOCATION TOOLS:")
    print("  ‚Ä¢ find_location_coordinates - Enhanced PDOK Locatieserver search")
    print("  ‚Ä¢ search_dutch_address_pdok - Specialized address search")
    
    print("\nüèõÔ∏è KADASTER TOOLS:")
    print("  ‚Ä¢ KadasterBRKTool - Land parcels and ownership data")
    print("  ‚Ä¢ ContactHistoryTool - Track property owner communications")
    
    print("\nüèóÔ∏è FLEXIBLE PDOK TOOLS (NEW):")
    print("  ‚Ä¢ PDOKServiceDiscoveryTool - Discover available PDOK services")
    print("  ‚Ä¢ PDOKDataRequestTool - Make flexible WFS requests")
    print("  ‚Ä¢ PDOKDataFilterTool - Apply distance/age/area filters")
    print("  ‚Ä¢ PDOKMapDisplayTool - Format data for map display")
    print("  ‚Ä¢ PDOKBuildingsFlexibleTool - Combined building search")
    

    
    print("\n‚ú® ADVANTAGES OF FLEXIBLE TOOLS:")
    print("  ‚úÖ Modular design - use individual tools or combined")
    print("  ‚úÖ Works with any PDOK WFS service, not just buildings")
    print("  ‚úÖ Better distance calculations and coordinate handling")
    print("  ‚úÖ Advanced filtering by age, area, distance")
    print("  ‚úÖ Agent can discover PDOK services automatically")
    print("  ‚úÖ Proper error handling and debugging")
    print("  ‚úÖ Solves the '0 buildings found' issue")

# Validation function to check if tools work
def validate_tools():
    """Validate that the flexible tools are working correctly."""
    print("\nüß™ VALIDATING FLEXIBLE PDOK TOOLS...")
    
    try:
        # Test service discovery
        discovery_tool = PDOKServiceDiscoveryTool()
        services_result = discovery_tool.forward("bag")
        
        if services_result.get('error'):
            print("‚ùå Service Discovery failed")
            return False
        else:
            print("‚úÖ Service Discovery working")
        
        # Test location search
        location_result = find_location_coordinates("Amsterdam")
        
        if location_result.get('error'):
            print("‚ùå Location search failed")
            return False
        else:
            print("‚úÖ Location search working")
        
        # Test flexible building tool
        flexible_tool = PDOKBuildingsFlexibleTool()
        # Quick test with small radius and limited features
        building_result = flexible_tool.forward(
            location="Amsterdam",
            max_features=5,
            radius_km=1.0
        )
        
        if building_result.get('error'):
            print(f"‚ö†Ô∏è Building search test failed: {building_result['error']}")
            print("   This might be due to network issues or coordinate problems")
            return True  # Don't fail validation for this
        else:
            buildings_found = len(building_result.get('geojson_data', []))
            print(f"‚úÖ Building search working - found {buildings_found} buildings")
        
        print("üéâ All flexible tools validated successfully!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("   Make sure all tool files are in the tools/ directory")
        return False
    except Exception as e:
        print(f"‚ùå Validation error: {e}")
        return False

# Auto-run validation when module is imported (optional)
if __name__ == "__main__":
    print_available_tools()
    validate_tools()