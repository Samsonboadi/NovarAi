# Advanced Dutch Dataset Integration

## Your Query Breakdown
**"Geef me alle percelen met eigenaren (kadaster) in een straal van 25 km vanaf een gridstation met beschikbare capaciteit (gridstations datasource) waar ik nog niet eerder contact over heb gehad met de eigenaar van het perceel"**

This requires:
1. **Kadaster data** (land parcels + owners)
2. **Grid stations data** (locations + available capacity)
3. **Contact history database** (your own data)
4. **Spatial analysis** (25km radius calculations)
5. **Data joining** (combining all datasets)

## Required Additional Tools & Datasets

### 1. Kadaster (Land Registry) Data
```python
class KadasterWFSTool(Tool):
    """Access Dutch Kadaster WFS service for land parcels and ownership"""
    
    def __init__(self):
        self.base_url = "https://service.pdok.nl/lv/bgt/wfs/v1_0"  # BGT for parcels
        self.brk_url = "https://service.pdok.nl/lv/brk/wfs/v2_0"   # BRK for ownership
    
    def get_parcels_with_owners(self, bbox, radius_km=25):
        """Get land parcels with owner information"""
        # Implementation for BRK (Basisregistratie Kadaster) data
        pass
```

**Available Kadaster Services:**
- **BRK (Basisregistratie Kadaster)**: Land parcels + ownership
- **BGT (Basisregistratie Grootschalige Topografie)**: Detailed topographic data
- **API Endpoints**: https://service.pdok.nl/lv/brk/wfs/v2_0

### 2. Grid Stations (Energy Infrastructure)
```python
class GridStationsWFSTool(Tool):
    """Access Dutch energy grid stations data"""
    
    def __init__(self):
        # This might need access to:
        # - TenneT data (high voltage)
        # - Stedin/Liander/Enexis data (distribution)
        # - CBS energy infrastructure data
        self.energy_url = "https://service.pdok.nl/cbs/energie/wfs/v1_0"
    
    def get_grid_stations_with_capacity(self, available_capacity_only=True):
        """Get grid stations with available capacity information"""
        pass
```

**Potential Sources:**
- **CBS Energy Data**: https://service.pdok.nl/cbs/
- **TenneT API**: Grid operator data
- **Distribution operators**: Stedin, Liander, Enexis APIs
- **Open Energy Data**: energieopwek.nl, openei.org

### 3. Contact History Database (Your Own Data)
```python
class ContactHistoryTool(Tool):
    """Manage your own contact history with land owners"""
    
    def __init__(self):
        # Your database connection
        self.db_connection = None
    
    def get_contacted_owners(self, owner_ids):
        """Check which owners you've already contacted"""
        pass
    
    def add_contact_record(self, owner_id, contact_date, notes):
        """Record new contact with owner"""
        pass
```

### 4. Advanced Spatial Analysis Tool
```python
class AdvancedSpatialTool(Tool):
    """Advanced spatial operations for complex queries"""
    
    def spatial_join_within_radius(self, center_points, target_features, radius_km):
        """Find all target features within radius of center points"""
        pass
    
    def filter_by_attribute_join(self, dataset1, dataset2, join_field):
        """Join datasets and filter results"""
        pass
```

## Implementation Architecture

### Enhanced App Structure
```python
# app.py additions
from tools.kadaster_tools import KadasterWFSTool, BRKOwnershipTool
from tools.energy_tools import GridStationsWFSTool
from tools.spatial_tools import AdvancedSpatialAnalysisTool
from tools.database_tools import ContactHistoryTool

# New complex query tool
class ComplexSpatialQueryTool(Tool):
    """Handle complex multi-dataset spatial queries"""
    
    def __init__(self):
        self.kadaster = KadasterWFSTool()
        self.grid_stations = GridStationsWFSTool()
        self.contact_history = ContactHistoryTool()
        self.spatial = AdvancedSpatialAnalysisTool()
    
    def find_parcels_near_available_grid_capacity(self, radius_km=25):
        """Execute the complex query from your example"""
        
        # Step 1: Get grid stations with available capacity
        grid_stations = self.grid_stations.get_grid_stations_with_capacity(
            available_capacity_only=True
        )
        
        # Step 2: For each grid station, find parcels within radius
        all_parcels = []
        for station in grid_stations:
            parcels = self.kadaster.get_parcels_with_owners(
                center=station['coordinates'],
                radius_km=radius_km
            )
            all_parcels.extend(parcels)
        
        # Step 3: Get owner contact history
        owner_ids = [p['owner_id'] for p in all_parcels]
        contacted_owners = self.contact_history.get_contacted_owners(owner_ids)
        
        # Step 4: Filter out already contacted owners
        uncontacted_parcels = [
            p for p in all_parcels 
            if p['owner_id'] not in contacted_owners
        ]
        
        return {
            "total_parcels_found": len(all_parcels),
            "uncontacted_parcels": len(uncontacted_parcels),
            "grid_stations_with_capacity": len(grid_stations),
            "geojson_data": uncontacted_parcels
        }
```

## Required Dependencies

### Python Packages
```bash
pip install geopandas  # Advanced geospatial operations
pip install sqlalchemy  # Database connectivity
pip install psycopg2-binary  # PostgreSQL (for your contact DB)
pip install owslib  # WFS/WMS client
pip install fiona  # Geospatial file I/O
pip install rtree  # Spatial indexing
pip install networkx  # Network analysis (for grid connections)
```

### Database Setup
```sql
-- Contact history table
CREATE TABLE contact_history (
    id SERIAL PRIMARY KEY,
    owner_id VARCHAR(50),
    owner_name VARCHAR(200),
    contact_date DATE,
    contact_method VARCHAR(50),
    response_status VARCHAR(50),
    notes TEXT,
    parcel_id VARCHAR(50)
);

-- Spatial index for performance
CREATE INDEX idx_contact_owner ON contact_history(owner_id);
```

## Available Dutch Government APIs

### 1. PDOK Services (Free)
- **Kadaster BRK**: https://service.pdok.nl/lv/brk/wfs/v2_0
- **BGT Topography**: https://service.pdok.nl/lv/bgt/wfs/v1_0  
- **CBS Statistics**: https://service.pdok.nl/cbs/

### 2. Kadaster APIs (Paid)
- **BRK Bevragen API**: Land ownership details
- **BAG API**: Building and address data
- **Cost**: ~â‚¬0.10-2.00 per query

### 3. Energy Grid Data
- **TenneT**: High voltage grid data
- **Regional operators**: Stedin, Liander, Enexis
- **CBS Energy**: Statistical energy infrastructure data

## Implementation Steps

### Phase 1: Basic Tools
1. âœ… **PDOK Buildings** (you have this)
2. ðŸ”¨ **Add Kadaster BRK tool** for land parcels
3. ðŸ”¨ **Add CBS energy infrastructure tool**
4. ðŸ”¨ **Create contact history database**

### Phase 2: Advanced Spatial Analysis
```python
@tool
def complex_spatial_query(query_type: str, center_location: str, radius_km: float) -> dict:
    """Execute complex spatial queries combining multiple Dutch datasets"""
    
    if query_type == "parcels_near_grid_capacity":
        return find_parcels_near_available_grid_capacity(
            center_location=center_location,
            radius_km=radius_km
        )
```

### Phase 3: Query Interface
Update your system prompt to handle Dutch language queries:

```yaml
# Add to system_prompt.yml
complex_queries:
  dutch_government_data: |
    For complex Dutch government data queries, you can combine:
    - Kadaster (land parcels, ownership)  
    - Energy infrastructure (grid stations)
    - Your contact history database
    
    Use the complex_spatial_query tool for multi-dataset operations.
```

## Cost Considerations

### Free Options
- âœ… PDOK WFS services (buildings, basic cadastral)
- âœ… CBS statistical data
- âœ… Open energy datasets

### Paid Options
- ðŸ’° **Kadaster BRK API**: â‚¬0.10-2.00 per query
- ðŸ’° **Detailed ownership data**: Requires subscription
- ðŸ’° **Real-time grid capacity**: May require energy operator partnerships

## Next Steps

1. **Choose your data sources** based on budget and requirements
2. **Set up contact history database** (PostgreSQL recommended)
3. **Implement Kadaster BRK tool** for land parcel data
4. **Add energy infrastructure tool** (start with free CBS data)
5. **Create complex query processor** to combine all datasets
6. **Test with simplified queries** before full implementation

Would you like me to start implementing any of these specific tools, or would you prefer to focus on a particular dataset first?